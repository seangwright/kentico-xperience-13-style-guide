import{_ as i,r as l,o as c,c as r,a as s,b as e,d as n,e as t}from"./app.d739b443.js";const D={},d=s("h1",{id:"asp-net-core",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#asp-net-core","aria-hidden":"true"},"#"),n(" ASP.NET Core")],-1),y=s("h2",{id:"settings",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#settings","aria-hidden":"true"},"#"),n(" Settings")],-1),u={id:"store-environment-specific-configuration-in-appsettings-json",tabindex:"-1"},h=s("a",{class:"header-anchor",href:"#store-environment-specific-configuration-in-appsettings-json","aria-hidden":"true"},"#",-1),v=n(),C=n(" Store Environment-Specific Configuration in appsettings.json"),m=s("ul",null,[s("li",null,[n("Use "),s("code",null,"appsettings.json"),n(" to store configuration that is environment specific")]),s("li",null,"Structure configuration hierarchically using JSON"),s("li",null,"Provide intelligent defaults when reading in configuration in the ASP.NET Core application")],-1),_=s("p",null,[s("strong",null,"Why?")],-1),g=n(`Test and Production aren't the only environments that developers need to consider. "Local" is likely the environment where developers need the most control over configuration and `),b={href:"https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-6.0&tabs=windows",target:"_blank",rel:"noopener noreferrer"},f=n("user secrets"),A=n(" allows for easy customization that is scoped to each developer's individual workspace."),E=s("p",null,[s("strong",null,"Why?")],-1),S=n("Values deployed to the application file system in production are more secure than "),w={href:"https://docs.xperience.io/custom-development/creating-custom-modules/adding-custom-website-settings",target:"_blank",rel:"noopener noreferrer"},x=n("custom CMS Settings"),I=n(" which can be read and updated by an administrator. If configuration needs to be more secure and does not need to be edited while the application is running, "),k=s("code",null,"appsettings.json",-1),F=n(" is a better source of values than CMS Settings."),B=s("p",null,[s("strong",null,"Why?")],-1),P=n("All "),U={href:"https://youtu.be/scEDHsr3APg",target:"_blank",rel:"noopener noreferrer"},M=n("CI/CD"),T=n(" systems have a way to populate configuration files with environment-specific or security-sensitive values "),q=s("em",null,"after",-1),W=n(" an application build has completed but "),N=s("em",null,"before",-1),j=n(" the build artifact is deployed to an environment. These values (ex: database connection strings, API keys) are stored with their own security settings to ensure they cannot be read or updated without specific permissions."),R={id:"store-runtime-or-site-specific-configuration-in-cms-settings",tabindex:"-1"},H=s("a",{class:"header-anchor",href:"#store-runtime-or-site-specific-configuration-in-cms-settings","aria-hidden":"true"},"#",-1),L=n(),V=n(" Store Runtime or Site-Specific Configuration in CMS Settings"),X=n("Create "),K={href:"https://docs.xperience.io/custom-development/creating-custom-modules/adding-custom-website-settings",target:"_blank",rel:"noopener noreferrer"},z=n("custom CMS Settings"),O=s("li",null,"Manage these settings per-environment",-1),G=n("Ensure changes to the settings are not accidentally synced to another environment "),J={href:"https://docs.xperience.io/deploying-websites/content-staging",target:"_blank",rel:"noopener noreferrer"},Q=n("using Content Staging"),Y=t('<p><strong>Why?</strong></p><p>Kentico Xperience has existing APIs and administration UI for managing configuration that is both global and site specific. To re-build this functionality in the ASP.NET Core <code>appsettings.json</code> configuration is often unnecessary.</p><p><strong>Why?</strong></p><p>Some configuration needs to be editable at runtime. Typically, configuration found in <code>appsettings.json</code> files is not accessible to site administrators and could require an application restart for the application to read updated values.</p><p>CMS Settings are accessible by the application as soon as they are updated, making them useful for values that need to be changed as need arises without require a deployment or access to the hosting environment.</p><h2 id="app-setup" tabindex="-1"><a class="header-anchor" href="#app-setup" aria-hidden="true">#</a> App Setup</h2>',6),Z={id:"fluent-builder-apis-for-di-and-middleware-registration",tabindex:"-1"},$=s("a",{class:"header-anchor",href:"#fluent-builder-apis-for-di-and-middleware-registration","aria-hidden":"true"},"#",-1),ss=n(),ns=n(" Fluent Builder APIs for DI and Middleware Registration"),es=s("li",null,[n("Create extension methods to abstract application setup out of "),s("code",null,"Startup.cs"),n(" or "),s("code",null,"Program.cs")],-1),as=n("Use a "),os={href:"https://medium.com/@martinstm/fluent-builder-pattern-c-4ac39fafcb0b",target:"_blank",rel:"noopener noreferrer"},ls=n("fluent builder API pattern"),ts=n(" to keep setup readable"),ps=s("li",null,"Add helper extension methods to make non-fluent setup APIs chainable",-1),is=t(`<p><strong>Why?</strong></p><p>Application setup code is often very declarative without much conditional logic and it describes what the application uses and what it does, rather than how it does it. To make setup code more readable, a fluent builder API can remove unnecessary syntax and read more like a table of contents than C# code.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Startup</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ConfigureServices</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">services</span><span style="color:#D4D4D4;">) =&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">services</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">AddAppXperience</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">AddAppMembership</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">AddAppMVC</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">AddAppCore</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Environment</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Config</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s very clear, from a high level, what the major areas of functionality are of this application, and these extension methods can be made more or less high level depending on the application&#39;s complexity.</p><p><strong>Why?</strong></p><p>The same pattern can be followed for defining the ASP.NET Core middleware pipeline, which is already a very declarative section of the application:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Startup</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Configure</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">IApplicationBuilder</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">) =&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">app</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">IfDevelopment</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Environment</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">a</span></span>
<span class="line"><span style="color:#D4D4D4;">                .</span><span style="color:#DCDCAA;">UseDeveloperExceptionPage</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">IfNotDevelopment</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Environment</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">a</span></span>
<span class="line"><span style="color:#D4D4D4;">                .</span><span style="color:#DCDCAA;">UseExceptionHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ExceptionHandlerOptions</span></span>
<span class="line"><span style="color:#D4D4D4;">                {</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#9CDCFE;">AllowStatusCode404Response</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#9CDCFE;">ExceptionHandlingPath</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;/error&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">                })</span></span>
<span class="line"><span style="color:#D4D4D4;">            )</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">UseHttpsRedirection</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">UseStaticFiles</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">UseStatusCodePagesWithReExecute</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/not-found&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;?code={0}&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">IfDevelopment</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Environment</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">a</span></span>
<span class="line"><span style="color:#D4D4D4;">                .</span><span style="color:#DCDCAA;">UseSwagger</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">                .</span><span style="color:#DCDCAA;">UseSwaggerUI</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">SwaggerEndpoint</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/swagger/v1/swagger.json&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;v1&quot;</span><span style="color:#D4D4D4;">)))</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">UseKentico</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">UseAuthentication</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">UseEndpoints</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">endpoints</span><span style="color:#D4D4D4;"> =&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">            {</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#9CDCFE;">endpoints</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Kentico</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">MapRoutes</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">endpoints</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">MapControllers</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">            });</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Why?</strong></p><p>Each extension method can then call additional extension methods. Since application setup is not stateful and lacks logic, there&#39;s no harm in using <code>static</code> extension methods and avoiding intermediate variables.</p><p><strong>Why?</strong></p>`,10),cs=n("An organized, high-level "),rs=s("code",null,"Startup.cs",-1),Ds=n(" will be easier to adapt to the new "),ds={href:"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/startup?view=aspnetcore-6.0",target:"_blank",rel:"noopener noreferrer"},ys=n("ASP.NET Core minimal startup"),us={class:"custom-container tip"},hs=s("p",{class:"custom-container-title"},"Maintaining Startup.cs",-1),vs=n("To learn more about how to organize and maintain a "),Cs=s("code",null,"Startup.cs",-1),ms=n(" file, read "),_s={href:"https://dev.to/seangwright/kentico-xperience-design-patterns-good-startup-cs-hygiene-3klm",target:"_blank",rel:"noopener noreferrer"},gs=n("Kentico Xperience Design Patterns: Good Startup.cs Hygiene"),bs={id:"group-extensions-based-on-sub-system",tabindex:"-1"},fs=s("a",{class:"header-anchor",href:"#group-extensions-based-on-sub-system","aria-hidden":"true"},"#",-1),As=n(),Es=n(" Group Extensions Based on Sub-System"),Ss=t(`<ul><li>Create separate static configuration classes for each area of functionality in an application</li><li>Create separate static <code>IServiceCollection</code> extension methods in those classes for each group of dependencies within a feature</li></ul><p><strong>Why?</strong></p><p>These extensions tell a story about what features and dependencies your app has. With these extension classes and methods, looking at <code>Startup.cs</code> will quickly show what kinds of things an application does.</p><p>Examples:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ECommerceConfiguration</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">AddEcommerce</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">services</span><span style="color:#D4D4D4;">) =&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">services</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">AddStripe</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">AddStripe</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">services</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ApplicationConfiguration</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">AddApplicationCore</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">services</span><span style="color:#D4D4D4;">) =&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">services</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">AddXMLSitemaps</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">AddXMLSitemaps</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">services</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IntegrationConfiguration</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">AddLegacyIntegration</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">services</span><span style="color:#D4D4D4;">) =&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">services</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">AddActiveDirectory</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">AddActiveDirectory</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">services</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),ws={id:"use-reflection-vs-manual-di-registration",tabindex:"-1"},xs=s("a",{class:"header-anchor",href:"#use-reflection-vs-manual-di-registration","aria-hidden":"true"},"#",-1),Is=n(),ks=n(" Use Reflection vs Manual DI Registration"),Fs=s("li",null,"Use reflection for registering types with many implementations",-1),Bs=n("Use a library like "),Ps={href:"https://github.com/khellang/Scrutor",target:"_blank",rel:"noopener noreferrer"},Us=n("Scrutor"),Ms=n(" for more powerful DI registration"),Ts=s("p",null,[s("strong",null,"Why?")],-1),qs=s("p",null,"One of the benefits of a DI conatiner is its ability to construct types for you through its access to all constructable types in an application. To fully take advantage of Dependency Injection",-1);function Ws(Ns,js){const o=l("ConsiderIcon"),a=l("ExternalLinkIcon"),p=l("EssentialIcon");return c(),r("div",null,[d,y,s("h3",u,[h,v,e(o),C]),m,_,s("p",null,[g,s("a",b,[f,e(a)]),A]),E,s("p",null,[S,s("a",w,[x,e(a)]),I,k,F]),B,s("p",null,[P,s("a",U,[M,e(a)]),T,q,W,N,j]),s("h3",R,[H,L,e(o),V]),s("ul",null,[s("li",null,[X,s("a",K,[z,e(a)])]),O,s("li",null,[G,s("a",J,[Q,e(a)])])]),Y,s("h3",Z,[$,ss,e(p),ns]),s("ul",null,[es,s("li",null,[as,s("a",os,[ls,e(a)]),ts]),ps]),is,s("p",null,[cs,rs,Ds,s("a",ds,[ys,e(a)])]),s("div",us,[hs,s("p",null,[vs,Cs,ms,s("a",_s,[gs,e(a)])])]),s("h3",bs,[fs,As,e(o),Es]),Ss,s("h3",ws,[xs,Is,e(p),ks]),s("ul",null,[Fs,s("li",null,[Bs,s("a",Ps,[Us,e(a)]),Ms])]),Ts,qs])}var Hs=i(D,[["render",Ws],["__file","aspnet-core.html.vue"]]);export{Hs as default};
