import{_ as a,r,o as n,c as l,a as e,b as o,e as s,d as i}from"./app.d739b443.js";const d={},c=s('<h1 id="data-querying" tabindex="-1"><a class="header-anchor" href="#data-querying" aria-hidden="true">#</a> Data Querying</h1><h2 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation" aria-hidden="true">#</a> Implementation</h2><ul><li>Use the following for querying in this order <ul><li><code>IPageRetriever</code> for querying <ul><li>More testable</li><li>Applies request context automatically</li></ul></li><li><code>ObjectQuery</code>/<code>DocumentQuery</code><ul><li>Handles protecting against SQL injection</li><li>Generates syntactically correct SQL</li><li>Makes queries dynamically composable</li></ul></li><li>SQL text in C# <ul><li>Under source control</li><li>Integration testable</li></ul></li><li>SQL queries in CMS <ul><li>Modifiable if needed</li><li>Ideal for CMS UI (Custom Module Classes / UniGrid definitions)</li></ul></li><li>Store procedures <ul><li>Database is not good source control</li></ul></li></ul></li><li>Create query extensions for common patterns</li><li>Always use async querying</li></ul><h2 id="optimizations" tabindex="-1"><a class="header-anchor" href="#optimizations" aria-hidden="true">#</a> Optimizations</h2><ul><li>Avoid N+1 querying</li><li>Use <code>.Columns()</code> to improve query performance</li><li>Retrieve the full <code>TreeNode</code> if you need to call a method requiring a <code>TreeNode</code> (ex: <code>IPageUrlRetriever</code>)</li></ul><h2 id="refactoring" tabindex="-1"><a class="header-anchor" href="#refactoring" aria-hidden="true">#</a> Refactoring</h2><ul><li>Use <code>nameof()</code> to aid in refactor</li><li>Avoid authoring SQL in the admin application</li><li>Write integration tests for complex queries</li></ul><h2 id="results" tabindex="-1"><a class="header-anchor" href="#results" aria-hidden="true">#</a> Results</h2><ul><li>Include identifiers to set cache keys</li><li>Get Image/Width height for Media Library/Attachments</li><li>Map Xperience types (<code>TreeNode</code>, <code>BaseInfo</code> objects) into DTOs <ul><li>Optimizes caching</li><li>Only retrieved data is accessible (<code>TreeNode</code> is a dynamic container)</li></ul></li></ul>',9),u={id:"use-result-container-for-querying",tabindex:"-1"},h=e("a",{class:"header-anchor",href:"#use-result-container-for-querying","aria-hidden":"true"},"#",-1),m=i(),f=i(" Use Result Container for Querying"),y={id:"model-missing-data-with-maybe-option-container",tabindex:"-1"},_=e("a",{class:"header-anchor",href:"#model-missing-data-with-maybe-option-container","aria-hidden":"true"},"#",-1),g=i(),p=i(" Model Missing Data with Maybe/Option Container");function b(q,x){const t=r("ConsiderIcon");return n(),l("div",null,[c,e("h3",u,[h,m,o(t),f]),e("h3",y,[_,g,o(t),p])])}var v=a(d,[["render",b],["__file","querying.html.vue"]]);export{v as default};
